"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[3261],{50258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(74848),i=t(28453);const r={title:"Packaging",pagination_prev:null,pagination_next:null},a="Packaging your game with the plugin",l={id:"guides/Packaging",title:"Packaging",description:"The releases I provide contains only pre-compiled binaries for the Windows 64bits platform.",source:"@site/versioned_docs/version-3.3/guides/Packaging.md",sourceDirName:"guides",slug:"/guides/Packaging",permalink:"/ProceduralDungeon/3.3/guides/Packaging",draft:!1,unlisted:!1,tags:[],version:"3.3",frontMatter:{title:"Packaging",pagination_prev:null,pagination_next:null},sidebar:"homeSidebar"},s={},c=[{value:"Packaging a C++ project",id:"packaging-a-c-project",level:2},{value:"Packaging a Blueprint-only project",id:"packaging-a-blueprint-only-project",level:2}];function d(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"packaging-your-game-with-the-plugin",children:"Packaging your game with the plugin"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://github.com/BenPyton/ProceduralDungeon/releases",children:"releases"})," I provide contains only pre-compiled binaries for the Windows 64bits platform."]}),"\n",(0,o.jsxs)(n.p,{children:["You can use it directly to develop with the Unreal Engine Editor out of the box for both Blueprint-only and C++ projects.",(0,o.jsx)(n.br,{}),"\n","You can also package your game with no difficulties when targeting Windows platform only."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["(if you have issues packaging the plugin for Windows despite being installed in the engine, then try to place it in the ",(0,o.jsx)(n.code,{children:"Plugins/Marketplace"})," folder of the engine instead)"]})}),"\n",(0,o.jsx)(n.p,{children:"However, to develop and/or package your game for other platforms, you will need to compile the plugin yourself for those platforms."}),"\n",(0,o.jsx)(n.h2,{id:"packaging-a-c-project",children:"Packaging a C++ project"}),"\n",(0,o.jsxs)(n.p,{children:["It's very simple as you just have to install the plugin in your project's ",(0,o.jsx)(n.code,{children:"Plugins"})," folder (not in the engine).",(0,o.jsx)(n.br,{}),"\n","Then, the plugin will be automatically compiled alongside your project when you package your project."]}),"\n",(0,o.jsx)(n.p,{children:"If you want to install the plugin in the engine, though, you will have to follow the same steps as for a Blueprint-only project (see below)."}),"\n",(0,o.jsx)(n.h2,{id:"packaging-a-blueprint-only-project",children:"Packaging a Blueprint-only project"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to package your Blueprint-only project for ",(0,o.jsx)(n.strong,{children:"another platform"})," than Windows, then you will have to compile the plugin for the target platforms you want and then ",(0,o.jsx)(n.a,{href:"/ProceduralDungeon/3.3/guides/Installation",children:"install it like you did before"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To compile the plugin, you don't need to have an Unreal Engine project.",(0,o.jsx)(n.br,{}),"\n","However, you will need to have the necessary development tools for the targeted platforms.",(0,o.jsx)(n.br,{}),"\n","For example, you will need a MacOS to build for MacOS and iOS. For Android you will need to install the engine binaries from the Epic Games Launcher and follow the steps described in ",(0,o.jsx)(n.a,{href:"https://dev.epicgames.com/documentation/en-us/unreal-engine/linux-development-requirements-for-unreal-engine?application_version=5.3",children:"their docs"})," to setup the toolchains."]}),"\n",(0,o.jsxs)(n.p,{children:["Then, you can place a copy of the plugin sources wherever you want.",(0,o.jsx)(n.br,{}),"\n","I will use ",(0,o.jsx)(n.code,{children:"D:/ProceduralDungeon"})," as example (the ",(0,o.jsx)(n.code,{children:".uplugin"})," should be located in that directory)."]}),"\n",(0,o.jsxs)(n.p,{children:["After you've installed all the necessary toolchains and development, you will have to whitelist these platforms in the ",(0,o.jsx)(n.code,{children:".uplugin"})," file.",(0,o.jsx)(n.br,{}),"\n","To do that, open the ",(0,o.jsx)(n.code,{children:"ProceduralDungeon.uplugin"})," in a text editor, and add the platforms you want in the ",(0,o.jsx)(n.code,{children:"WhitelistPlatforms"})," of the modules (put only the ones you want):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",metastring:'title="ProceduralDungeon.uplugin"',children:'"WhitelistPlatforms": [\r\n\t"Win64",\r\n\t"Android",\r\n\t"IOS",\r\n\t"Mac",\r\n\t"Linux"\r\n]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then, you will need to open a command prompt and run those commands (replace ",(0,o.jsx)(n.code,{children:"RunUAT.bat"})," with ",(0,o.jsx)(n.code,{children:"RunUAT.sh"})," if you are compiling ",(0,o.jsx)(n.em,{children:"from"})," a Mac or Linux, ",(0,o.jsx)(n.strong,{children:"not"})," when you target those platforms from Windows).",(0,o.jsx)(n.br,{}),"\n","In my example I'm using ",(0,o.jsx)(n.code,{children:"C:\\Epic Games\\UE_5.2"})," as the installation directory of the Unreal Engine. Replace it with your own installation path."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cmd",metastring:'title="Command Prompt"',children:'> cd "C:\\Epic Games\\UE_5.2\\Engine\\Build\\BatchFiles"\r\n> RunUAT.bat BuildPlugin -Plugin="D:\\ProceduralDungeon\\ProceduralDungeon.uplugin" -Package="D:\\Output\\ProceduralDungeon" -TargetPlatforms="Android"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For the example above, I've used ",(0,o.jsx)(n.code,{children:"D:/Output/ProceduralDungeon"})," as the output directory where the pre-compiled plugin binaries are placed.\r\nYou can replace it with any other path you want."]}),"\n",(0,o.jsxs)(n.p,{children:["Finally, copy the output directory where you've installed the plugin before.",(0,o.jsx)(n.br,{}),"\n","It is now containing the pre-compiled binaries for your target platforms and you should be able to package your Blueprint-only project for those platforms."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var o=t(96540);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);