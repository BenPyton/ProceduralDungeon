"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[4437],{2639:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=n(4848),r=n(8453);const s={pagination_prev:"guides/Is-Valid-Dungeon",pagination_next:"api/Classes/DungeonGenerator/Nodes/Generate/Generate"},a="Choose Door",i={id:"guides/Choose-Door",title:"Choose Door",description:"This function let you choose a door actor to spawn between 2 rooms.\\",source:"@site/docs/guides/Choose-Door.md",sourceDirName:"guides",slug:"/guides/Choose-Door",permalink:"/ProceduralDungeon/guides/Choose-Door",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{pagination_prev:"guides/Is-Valid-Dungeon",pagination_next:"api/Classes/DungeonGenerator/Nodes/Generate/Generate"},sidebar:"homeSidebar",previous:{title:"Is Valid Dungeon",permalink:"/ProceduralDungeon/guides/Is-Valid-Dungeon"},next:{title:"Generate",permalink:"/ProceduralDungeon/api/DungeonGenerator/Generate"}},c={},d=[];function u(e){const o={a:"a",br:"br",code:"code",h1:"h1",img:"img",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"choose-door",children:"Choose Door"}),"\n",(0,t.jsxs)(o.p,{children:["This function let you choose a ",(0,t.jsx)(o.a,{href:"/ProceduralDungeon/guides/Door",children:"door actor"})," to spawn between 2 rooms.",(0,t.jsx)(o.br,{}),"\n","If you don't want a door between the rooms you just have to return ",(0,t.jsx)(o.code,{children:"none"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["You should use the ",(0,t.jsx)(o.code,{children:"Door Type"})," input to return a door of the correct type if you use multiple door types in your project.",(0,t.jsx)(o.br,{}),"\n","You can check the door type of a door actor class with the function ",(0,t.jsx)(o.code,{children:"Is Door Of Type"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["You can use the ",(0,t.jsx)(o.code,{children:"Flipped"})," output to control which room the door faces.",(0,t.jsx)(o.br,{}),"\n","If false (default) the door forward will face the ",(0,t.jsx)(o.code,{children:"Current Room"}),".",(0,t.jsx)(o.br,{}),"\n","If true, the door forward will face the ",(0,t.jsx)(o.code,{children:"Next Room"}),"."]}),"\n",(0,t.jsx)(o.p,{children:'One of the room class input can be null if there is no room connected to it.\r\nYou certainly want to set an always closed door, or a door actor that act as a "wall".'}),"\n",(0,t.jsxs)(o.p,{children:["An example to spawn a simple door if both rooms are valid, or a wall if one of them is not valid (assuming there is only one door type):\r\n",(0,t.jsx)(o.img,{src:n(7638).A+"",width:"917",height:"473"})]})]})}function l(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},7638:(e,o,n)=>{n.d(o,{A:()=>t});const t=n.p+"assets/images/ChooseDoor-7fc7c159a668a760be43c01f3166a200.jpg"},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>i});var t=n(6540);const r={},s=t.createContext(r);function a(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);