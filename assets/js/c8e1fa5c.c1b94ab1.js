"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[32367],{63763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/Enums/ESeedType/ESeedType","title":"ESeedType","description":"Procedural Dungeon \u23f5","source":"@site/versioned_docs/version-3.4/api/Enums/ESeedType/ESeedType.md","sourceDirName":"api/Enums/ESeedType","slug":"/api/Enums/ESeedType/","permalink":"/ProceduralDungeon/3.4/api/Enums/ESeedType/","draft":false,"unlisted":false,"tags":[],"version":"3.4","frontMatter":{"pagination_prev":null,"pagination_next":null},"sidebar":"homeSidebar"}');var r=t(74848),d=t(28453);const i={pagination_prev:null,pagination_next:null},a="Seed Type",l={},o=[{value:"Class Details",id:"class-details",level:2},{value:"Values",id:"values",level:2}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/ProceduralDungeon/3.4/api/",children:"Procedural Dungeon"})," \u23f5\r\nSeed Type"]}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"seed-type",children:"Seed Type"})}),"\n",(0,r.jsx)(n.h2,{id:"class-details",children:"Class Details"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Defined in:"})," ",(0,r.jsx)(n.code,{children:"Public/ProceduralDungeonTypes.h"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Exposed in blueprint as:"})," Variable\xa0Type"]}),"\n",(0,r.jsx)(n.h2,{id:"values",children:"Values"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Random"}),(0,r.jsx)(n.td,{children:"Random seed at each generation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Auto Increment"}),(0,r.jsx)(n.td,{children:"Get the initial seed and increment at each generation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Fixed"}),(0,r.jsx)(n.td,{children:"Always use initial seed (or you can set it manually via blueprint)"})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(96540);const r={},d=s.createContext(r);function i(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);