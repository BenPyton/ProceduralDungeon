"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[4237],{9279:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=n(4848),r=n(8453);const s={pagination_prev:null,pagination_next:null},i="Room Observer",c={id:"guides/Room-Observer",title:"Room Observer",description:"The room observer components allows actors to be notified whenever any actor enters or exits a room.\\",source:"@site/docs/guides/Room-Observer.md",sourceDirName:"guides",slug:"/guides/Room-Observer",permalink:"/ProceduralDungeon/guides/Room-Observer",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null},sidebar:"homeSidebar"},a={},l=[{value:"Room Observer Component",id:"room-observer-component",level:2},{value:"Static Room Observer Component",id:"static-room-observer-component",level:2},{value:"How to use it",id:"how-to-use-it",level:2}];function d(e){const o={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"room-observer",children:"Room Observer"}),"\n",(0,t.jsxs)(o.p,{children:["The room observer components allows actors to be notified whenever any actor enters or exits a room.",(0,t.jsx)(o.br,{}),"\n","The components bind themselves to the ",(0,t.jsx)(o.code,{children:"Room Level"}),"'s ",(0,t.jsx)(o.code,{children:"On Actor Enter Room"})," and ",(0,t.jsx)(o.code,{children:"On Actor Exit Room"})," delegates and then call their own ",(0,t.jsx)(o.code,{children:"On Actor Enter Room"})," and ",(0,t.jsx)(o.code,{children:"On Actor Exit Room"})," delegates.",(0,t.jsx)(o.br,{}),"\n","Thus, once placed on an actor, you just have to bind to the component delegates to be notified when those events occur.",(0,t.jsx)(o.br,{}),"\n",(0,t.jsxs)(o.em,{children:["Only actors that don't ignore the ",(0,t.jsx)(o.a,{href:"/ProceduralDungeon/guides/Plugin-Settings",children:(0,t.jsx)(o.code,{children:"Room Object Type"})})," collision channel will trigger the events."]})]}),"\n",(0,t.jsx)(o.h2,{id:"room-observer-component",children:"Room Observer Component"}),"\n",(0,t.jsxs)(o.p,{children:["Place this component on your actors if they ",(0,t.jsx)(o.strong,{children:"can move between rooms"})," ",(0,t.jsx)(o.em,{children:"or"})," ",(0,t.jsx)(o.strong,{children:"are not placed in room levels"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["This component implements the ",(0,t.jsx)(o.a,{href:"/ProceduralDungeon/guides/Room-Visitor",children:"Room Visitor"})," interface to detect whenever the actor enters/exits room to bind automatically to the delegates.\r\nSo, the actor with this component needs to be setup to overlap with the ",(0,t.jsx)(o.a,{href:"/ProceduralDungeon/guides/Plugin-Settings",children:(0,t.jsx)(o.code,{children:"Room Object Type"})})," collision channel."]}),"\n",(0,t.jsx)(o.h2,{id:"static-room-observer-component",children:"Static Room Observer Component"}),"\n",(0,t.jsxs)(o.p,{children:["Use this one if your actors ",(0,t.jsx)(o.strong,{children:"will never get out of their room"})," ",(0,t.jsx)(o.em,{children:"and"})," ",(0,t.jsx)(o.strong,{children:"are placed in room levels"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["This component will bind to its parent level at ",(0,t.jsx)(o.code,{children:"Begin Play"})," and unbind at ",(0,t.jsx)(o.code,{children:"End Play"})," automatically.\r\nIt has much less overhead than the non-static ",(0,t.jsx)(o.code,{children:"Room Observer"})," component.\r\nThus, it makes a good choice when you have lot of actors that need this feature and are static to their room."]}),"\n",(0,t.jsx)(o.h2,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,t.jsx)(o.p,{children:"Just add the component on any actor, and then bind to its delegate the way you want."}),"\n",(0,t.jsxs)(o.p,{children:['Here a simple example of a "fog of war" actor that will hide/show itself when the player enters/exits its room.\r\nIt is an actor placed directly in the room level and will never move to another room, so I attached a ',(0,t.jsx)(o.code,{children:"Static Room Observer"})," on it."]}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{src:n(6266).A+"",width:"1701",height:"522"})})]})}function h(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},6266:(e,o,n)=>{n.d(o,{A:()=>t});const t=n.p+"assets/images/RoomObserver-298d264aa93de80cee09a7f4ceafddf1.png"},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>c});var t=n(6540);const r={},s=t.createContext(r);function i(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);