"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[83688],{38799:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"guides/Advanced-Features/Filter-Sort","title":"Filter and Sort Rooms","description":"The plugin v3.6 introduces a new node, and an extremely useful one.","source":"@site/docs/guides/Advanced-Features/Filter-Sort.md","sourceDirName":"guides/Advanced-Features","slug":"/guides/Advanced-Features/Filter-Sort","permalink":"/ProceduralDungeon/guides/Advanced-Features/Filter-Sort","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"pagination_prev":null,"pagination_next":null},"sidebar":"homeSidebar"}');var s=o(74848),r=o(28453);const i={pagination_prev:null,pagination_next:null},d="Filter and Sort Rooms",a={},c=[{value:"Explanation",id:"explanation",level:2},{value:"Custom Score Function",id:"custom-score-function",level:2}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"filter-and-sort-rooms",children:"Filter and Sort Rooms"})}),"\n",(0,s.jsx)(n.p,{children:"The plugin v3.6 introduces a new node, and an extremely useful one."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:o(61986).A+"",width:"451",height:"227"})}),"\n",(0,s.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["As its name implies, its purpose is to ",(0,s.jsx)(n.strong,{children:"filter"})," and ",(0,s.jsx)(n.strong,{children:"sort"})," a list of room data."]}),"\n",(0,s.jsxs)(n.p,{children:["Each element in the output array is an union of a room data and one of its door. This is called a ",(0,s.jsx)(n.code,{children:"Room Candidate"}),".",(0,s.jsx)(n.br,{}),"\n","Thus, one room data in the input array may appear several times in the output array, if multiple doors of the room allows it to be placed."]}),"\n",(0,s.jsx)(n.p,{children:"A room is filtered out (not included in the output) if it can't be placed in the dungeon (e.g. no compatible door, or overlapping with existing rooms)."}),"\n",(0,s.jsxs)(n.p,{children:["If a room candidate can be placed, a score is computed.",(0,s.jsx)(n.br,{}),"\n","By default, the room size and the door alignments are used to compute this score, but you can create a custom function to compute this score (see next section)."]}),"\n",(0,s.jsx)(n.p,{children:"The output array is sorted using this score, so the highest score is the first element of the array."}),"\n",(0,s.jsx)(n.h2,{id:"custom-score-function",children:"Custom Score Function"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:o(18818).A+"",width:"2463",height:"827"})}),"\n",(0,s.jsx)(n.p,{children:"Here is a simple example for a custom score function."}),"\n",(0,s.jsx)(n.p,{children:"This is called for each side of each cell of the room candidate."}),"\n",(0,s.jsxs)(n.p,{children:["You return ",(0,s.jsx)(n.code,{children:"True"})," if the room candidate is still valid, or ",(0,s.jsx)(n.code,{children:"False"})," if you want to discard the room candidate from the output array."]}),"\n",(0,s.jsxs)(n.p,{children:["You can add, subtract or set the value of the ",(0,s.jsx)(n.code,{children:"Score"})," input depending on the cases."]}),"\n",(0,s.jsx)(n.p,{children:"There is currently 3 types of cell side:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"None"}),": the cell is not occupied by a room."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Wall"}),": the cell is occupied by a room but no door is defined on this side."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Door"}),": the cell is occupied by a room, and a door is defined on this side."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In the case of a ",(0,s.jsx)(n.code,{children:"Door"})," side type, the ",(0,s.jsx)(n.code,{children:"Door Type"})," field is set to the ",(0,s.jsx)(n.a,{href:"/ProceduralDungeon/guides/Advanced-Features/Door-Types",children:(0,s.jsx)(n.code,{children:"Door Type"})})," asset (or none if using the default door type)."]}),"\n",(0,s.jsx)(n.p,{children:"See this drawing below to better understand the different cases you can encounter:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:o(17977).A+"",width:"1284",height:"855"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},61986:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/FilterAndSortRooms-5e203fb59969afe6d1d0e9fa410a5646.jpg"},18818:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/FilterAndSortRooms_CustomScore-b5f527454b103e8ec7a52e5d8f979ab9.jpg"},17977:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/FilterAndSortRooms_CustomScore_Drawing-1ff56fd3504cc8ee2b89ab401c7b111f.jpg"},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>d});var t=o(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);