"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[65754],{72532:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>m,default:()=>j,frontMatter:()=>p,metadata:()=>o,toc:()=>x});const o=JSON.parse('{"id":"guides/Home","title":"Guides","description":"Overview","source":"@site/docs/guides/Home.md","sourceDirName":"guides","slug":"/guides/Home","permalink":"/ProceduralDungeon/guides/Home","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Guides","sidebar_class_name":"hidden","pagination_prev":null,"pagination_next":null},"sidebar":"homeSidebar"}');var i=t(74848),a=t(28453);const r=t.p+"assets/images/ProceduralDungeonDemo_RoomSpawn-8babdb55cbc39a2ef32a3477f5e74d8b.gif",s=t.p+"assets/images/ProceduralDungeonDemo_RoomA-9e867eaaf87845e08b74044eda58db4b.gif",l=t.p+"assets/images/ProceduralDungeonDemo_RoomB-1a1052525d015c23ccdb08a2e152e703.gif",d=t.p+"assets/images/ProceduralDungeonDemo_RoomC-e6b3592bd1b49a0d4e9167fd5f2bbdbb.gif",u=t.p+"assets/images/ProceduralDungeonDemo_RoomD-27949987387b87ba415e7717c467ef85.gif",h=t.p+"assets/images/ProceduralDungeonDemo_RoomExit-2bbd672320b2087c8e13ead7703926b9.gif",c=t.p+"assets/images/ProceduralDungeonResult-16025b34235f910133369b5b0bd6cd92.gif",g=t.p+"assets/images/ProceduralDungeonResult2-a9dbad642242c1779ebf000de01922c3.gif",p={title:"Guides",sidebar_class_name:"hidden",pagination_prev:null,pagination_next:null},m="Procedural Dungeon Plugin",f={},x=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"What you need to do",id:"what-you-need-to-do",level:2},{value:"Tips",id:"tips",level:2}];function b(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"procedural-dungeon-plugin",children:"Procedural Dungeon Plugin"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:['This is an Unreal Engine plugin that let you create dungeons procedurally like "The Binding of Isaac" or "Rogue Legacy" but in 3D.',(0,i.jsx)(n.br,{}),"\n","With this plugin you create rooms by hand and you define your generation rules with blueprint.",(0,i.jsx)(n.br,{}),"\n","The plugin then generate a dungeon that can be random or deterministic following what rules you've programmed."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Some hand-made rooms defined with bounds and doors:"}),"\n",(0,i.jsx)("img",{src:r,alt:"RoomSpawn",width:"125"}),"\n",(0,i.jsx)("img",{src:s,alt:"RoomA",width:"125"}),"\n",(0,i.jsx)("img",{src:l,alt:"RoomB",width:"125"}),"\n",(0,i.jsx)("img",{src:d,alt:"RoomC",width:"125"}),"\n",(0,i.jsx)("img",{src:u,alt:"RoomD",width:"125"}),"\n",(0,i.jsx)("img",{src:h,alt:"RoomExit",width:"125"}),"\n",(0,i.jsx)(n.p,{children:"Some very simple generation rules:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A special room (red) used to spawn the player."}),"\n",(0,i.jsx)(n.li,{children:"Then 10 rooms chosen randomly in a list (blue, green, yellow, cyan)."}),"\n",(0,i.jsx)(n.li,{children:"Then a special room (purple) used as an end goal for the player."}),"\n",(0,i.jsx)(n.li,{children:"Finally 10 other rooms chosen randomly."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Possible results:"}),"\n",(0,i.jsx)("img",{src:c,alt:"Result1",width:"400"}),"\n",(0,i.jsx)("img",{src:g,alt:"Result2",width:"400"}),"\n",(0,i.jsx)(n.h2,{id:"what-you-need-to-do",children:"What you need to do"}),"\n",(0,i.jsxs)(n.p,{children:["First, ",(0,i.jsx)(n.a,{href:"/ProceduralDungeon/guides/Getting-Started/Installation",children:"install"})," and ",(0,i.jsx)(n.a,{href:"/ProceduralDungeon/guides/Getting-Started/Plugin-Settings",children:"configure"})," the plugin.",(0,i.jsx)(n.br,{}),"\n","Then, read and follow the instructions to ",(0,i.jsx)(n.a,{href:"/ProceduralDungeon/guides/Getting-Started/Creating-Rooms",children:"create rooms"})," and a setup  a ",(0,i.jsx)(n.a,{href:"/ProceduralDungeon/guides/Getting-Started/Generating-Dungeon/Dungeon-Generator",children:"dungeon generator"}),".",(0,i.jsx)(n.br,{}),"\n","This will give you a minimal working dungeon.",(0,i.jsx)(n.br,{}),"\n","You can then read the ",(0,i.jsx)(n.code,{children:"Advanced Features"})," section to know what the plugin has to offer on top of the basics."]}),"\n",(0,i.jsxs)(n.p,{children:["An ",(0,i.jsx)(n.a,{href:"https://github.com/BenPyton/DungeonExample",children:"example project"})," is available if you want to try a minimal working project."]}),"\n",(0,i.jsxs)(n.p,{children:["You can also join the ",(0,i.jsx)(n.a,{href:"https://discord.gg/YE2dPda2CC",children:"Discord server"})," dedicated to this plugin if you want to ask question or get help from the community."]}),"\n",(0,i.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,i.jsxs)(n.p,{children:["The generation takes a certain duration to complete (the generation itself is done in one frame, but the loading of each room level takes some times proportional to their number and complexity).",(0,i.jsx)("br",{}),"\r\nSo, if you have the player character spawned at start, it will fall into the void of the universe before the end of the dungeon generation."]}),"\n",(0,i.jsx)(n.p,{children:"To manage this situation, you have multiple solutions:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The easy and ugly way is to place a little plane somewhere with the player start on it, and disable the inputs from the player to prevent him to fall from this plane, then when the generation is complete you teleport the player into the first room and unlock the inputs;"}),"\n",(0,i.jsxs)(n.li,{children:["The better and cleaner way is to spawn the player as spectator until the end of the generation, and then you spawn the player character at a player start. (I've added a ",(0,i.jsx)(n.a,{href:"/api/DungeonBlueprintLibrary/Spectate",children:(0,i.jsx)(n.code,{children:"Spectate"})})," blueprint node to ease this solution)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Both solutions are using the ",(0,i.jsx)(n.code,{children:"Post Generation Event"})," to know when the generation is done.\r\nYou will also want to show or keep a loading screen when you start your game map, and you hide it on this event too."]})]})}function j(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(b,{...e})}):b(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);