"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[7915],{56549:(o,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=n(74848),t=n(28453);const s={pagination_prev:"guides/Is-Valid-Dungeon",pagination_next:"guides/Packaging"},i="Choose Door",a={id:"guides/Choose-Door",title:"Choose Door",description:"This function let you choose a door actor to spawn between 2 rooms.\\",source:"@site/versioned_docs/version-3.3/guides/Choose-Door.md",sourceDirName:"guides",slug:"/guides/Choose-Door",permalink:"/ProceduralDungeon/3.3/guides/Choose-Door",draft:!1,unlisted:!1,tags:[],version:"3.3",frontMatter:{pagination_prev:"guides/Is-Valid-Dungeon",pagination_next:"guides/Packaging"},sidebar:"homeSidebar",previous:{title:"Is Valid Dungeon",permalink:"/ProceduralDungeon/3.3/guides/Is-Valid-Dungeon"},next:{title:"Packaging",permalink:"/ProceduralDungeon/3.3/guides/Packaging"}},c={},d=[];function u(o){const e={a:"a",br:"br",code:"code",h1:"h1",header:"header",img:"img",p:"p",...(0,t.R)(),...o.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"choose-door",children:"Choose Door"})}),"\n",(0,r.jsxs)(e.p,{children:["This function let you choose a ",(0,r.jsx)(e.a,{href:"/ProceduralDungeon/3.3/guides/Door",children:"door actor"})," to spawn between 2 rooms.",(0,r.jsx)(e.br,{}),"\n","If you don't want a door between the rooms you just have to return ",(0,r.jsx)(e.code,{children:"none"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["You should use the ",(0,r.jsx)(e.code,{children:"Door Type"})," input to return a door of the correct type if you use multiple door types in your project.",(0,r.jsx)(e.br,{}),"\n","You can check the door type of a door actor class with the function ",(0,r.jsx)(e.code,{children:"Is Door Of Type"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["You can use the ",(0,r.jsx)(e.code,{children:"Flipped"})," output to control which room the door faces.",(0,r.jsx)(e.br,{}),"\n","If false (default) the door forward will face the ",(0,r.jsx)(e.code,{children:"Current Room"}),".",(0,r.jsx)(e.br,{}),"\n","If true, the door forward will face the ",(0,r.jsx)(e.code,{children:"Next Room"}),"."]}),"\n",(0,r.jsx)(e.p,{children:'One of the room class input can be null if there is no room connected to it.\r\nYou certainly want to set an always closed door, or a door actor that act as a "wall".'}),"\n",(0,r.jsx)(e.p,{children:"An example to spawn a simple door if both rooms are valid, or a wall if one of them is not valid (assuming there is only one door type):"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:n(45076).A+"",width:"917",height:"473"})})]})}function l(o={}){const{wrapper:e}={...(0,t.R)(),...o.components};return e?(0,r.jsx)(e,{...o,children:(0,r.jsx)(u,{...o})}):u(o)}},45076:(o,e,n)=>{n.d(e,{A:()=>r});const r=n.p+"assets/images/ChooseDoor-7fc7c159a668a760be43c01f3166a200.jpg"},28453:(o,e,n)=>{n.d(e,{R:()=>i,x:()=>a});var r=n(96540);const t={},s=r.createContext(t);function i(o){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function a(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(t):o.components||t:i(o.components),r.createElement(s.Provider,{value:e},o.children)}}}]);