"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[594],{3478:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>d,metadata:()=>i,toc:()=>l});var s=n(4848),t=n(8453);const d={sidebar_position:1},o="Procedural Dungeon API",i={id:"api/index",title:"Procedural Dungeon API",description:"Classes",source:"@site/docs/api/index.md",sourceDirName:"api",slug:"/api/",permalink:"/ProceduralDungeon/api/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"apiSidebar",next:{title:"BoundsParams",permalink:"/ProceduralDungeon/api/BoundsParams/"}},c={},l=[{value:"Classes",id:"classes",level:2},{value:"Structs",id:"structs",level:2},{value:"Enums",id:"enums",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"procedural-dungeon-api",children:"Procedural Dungeon API"}),"\n",(0,s.jsx)(r.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Group"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/Door/",children:"Door"})}),(0,s.jsx)(r.td,{children:"Procedural"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/DoorType/",children:"Door Type"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/DungeonBlueprintLibrary/",children:"Dungeon Blueprint Library"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/DungeonGenerator/",children:"Dungeon Generator"})}),(0,s.jsx)(r.td,{children:"Procedural"}),(0,s.jsx)(r.td,{children:"This is the main actor of the plugin. The dungeon generator is responsible to generate dungeons and replicate them over the network."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/DungeonGraph/",children:"Dungeon Graph"})}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["Holds the generated dungeon.",(0,s.jsx)("br",{}),"You can access the rooms using many functions."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/ProceduralDungeonSettings/",children:"Procedural Dungeon Settings"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"Holds the plugin's settings."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/ReplicableObject/",children:"Replicable Object"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/Room/",children:"Room"})}),(0,s.jsx)(r.td,{}),(0,s.jsxs)(r.td,{children:["The room instances of the dungeon.",(0,s.jsx)("br",{}),"Holds data specific to each room instance, e.g. location, direction, is player inside, room custom data, etc."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/RoomCustomData/",children:"Room Custom Data"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:"Base class for user custom data embedded in room instances"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/RoomData/",children:"Room Data"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/RoomLevel/",children:"Room Level"})}),(0,s.jsx)(r.td,{children:"Procedural"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/RoomObserverComponent/",children:"Room Observer Component"})}),(0,s.jsx)(r.td,{children:"ProceduralDungeon"}),(0,s.jsxs)(r.td,{children:["Room Observer that auto-(un)bind itself when it enters/exits a dungeon room.",(0,s.jsx)("br",{}),"Could observe (be bound) multiple rooms at once if the actor overlaps multiple room.",(0,s.jsx)("br",{}),"This component ",(0,s.jsx)(r.strong,{children:"does"})," track its own Room, thus the actor can move between rooms (use StaticRoomObserverComponent instead if this behavior is not needed)."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/RoomVisibilityComponent/",children:"Room Visibility"})}),(0,s.jsx)(r.td,{children:"ProceduralDungeon"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/StaticRoomVisibilityComponent/",children:"Room Visibility (Static)"})}),(0,s.jsx)(r.td,{children:"ProceduralDungeon"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/RoomVisitor/",children:"Room Visitor"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.em,{children:"UInterface cannot be documented"})})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/StaticRoomObserverComponent/",children:"Static Room Observer Component"})}),(0,s.jsx)(r.td,{children:"ProceduralDungeon"}),(0,s.jsxs)(r.td,{children:["Room Observer that auto-(un)bind itself at BeginPlay and EndPlay.",(0,s.jsx)("br",{}),"This component will bind to the level it belongs to. So it needs to be placed directly in the Room map.",(0,s.jsx)("br",{}),"This component does ",(0,s.jsx)(r.strong,{children:"not"})," track its own Room, thus the actor should not move between rooms (use RoomObserverComponent instead)."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/TriggerDoor/",children:"Trigger Door"})}),(0,s.jsx)(r.td,{}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/TriggerType/",children:"Trigger Type"})}),(0,s.jsx)(r.td,{children:"Custom"}),(0,s.jsx)(r.td,{})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"structs",children:"Structs"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/BoundsParams/",children:"Bounds Params"})}),(0,s.jsxs)(r.td,{children:["Holds the settings for the dungeon limits.",(0,s.jsx)("br",{}),"These values are expressed in Room cells, and are based on the origin of the first room (0,0,0).",(0,s.jsx)("br",{}),"For example, if the first room is only 1 room cell (",(0,s.jsx)(r.code,{children:"FirstPoint = (0,0,0)"}),", ",(0,s.jsx)(r.code,{children:"SecondPoint = (1,1,1)"}),"), then  this is the cell (0,0,0).",(0,s.jsx)("br",{}),"If you set a ",(0,s.jsx)(r.code,{children:"MinY=2"})," et ",(0,s.jsx)(r.code,{children:"MaxY=2"}),", then on the Y axis the dungeon can go from the cell -2 to cell 2,",(0,s.jsx)("br",{}),"Making an effective range of 5 cells, centered on the first room."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/DoorDef/",children:"Door Def"})}),(0,s.jsx)(r.td,{})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"enums",children:"Enums"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/EDoorDirection/",children:"Door Direction"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/EGenerationType/",children:"Generation Type"})}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/EVisibilityMode/",children:"Room Visibility"})}),(0,s.jsx)(r.td,{children:"Visibility mode for Room Visibilty Components."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"C++"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/ProceduralDungeon/api/ESeedType/",children:"Seed Type"})}),(0,s.jsx)(r.td,{})]})]})]})]})}function a(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>i});var s=n(6540);const t={},d=s.createContext(t);function o(e){const r=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(d.Provider,{value:r},e.children)}}}]);