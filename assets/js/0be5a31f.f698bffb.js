"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[2086],{4066:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(4848),t=n(8453);const s={pagination_prev:null,pagination_next:null},d="Room",i={id:"api/Classes/Room/Room",title:"Room",description:"Procedural Dungeon \u23f5",source:"@site/docs/api/Classes/Room/Room.md",sourceDirName:"api/Classes/Room",slug:"/api/Classes/Room/",permalink:"/ProceduralDungeon/api/Classes/Room/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null},sidebar:"homeSidebar"},c={},l=[{value:"Class Details",id:"class-details",level:2},{value:"Description",id:"description",level:2},{value:"Nodes",id:"nodes",level:2}];function a(e){const o={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/",children:"Procedural Dungeon"})," \u23f5\nRoom"]}),"\n",(0,r.jsx)(o.h1,{id:"room",children:"Room"}),"\n",(0,r.jsx)(o.h2,{id:"class-details",children:"Class Details"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:"Defined in:"})," ",(0,r.jsx)(o.code,{children:"Public/Room.h"}),(0,r.jsx)(o.br,{}),"\n",(0,r.jsx)(o.strong,{children:"Hierarchy:"})," ",(0,r.jsx)(o.em,{children:"Object \u2192 Replicable Object \u2192 Room"}),(0,r.jsx)(o.br,{}),"\n",(0,r.jsx)(o.strong,{children:"Exposed in blueprint as:"})," Variable\xa0Type"]}),"\n",(0,r.jsx)(o.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(o.p,{children:["The room instances of the dungeon.",(0,r.jsx)("br",{}),"Holds data specific to each room instance, e.g. location, direction, is player inside, room custom data, etc."]}),"\n",(0,r.jsx)(o.h2,{id:"nodes",children:"Nodes"}),"\n",(0,r.jsxs)(o.table,{children:[(0,r.jsx)(o.thead,{children:(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.th,{children:"Name"}),(0,r.jsx)(o.th,{children:"Category"}),(0,r.jsx)(o.th,{children:"Description"})]})}),(0,r.jsxs)(o.tbody,{children:[(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/AreAllDoorsConnected",children:"Are All Doors Connected"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns true if all the doors of this room are connected to other rooms."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetAllConnectedRooms",children:"Get All Connected Rooms"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns all the room instances connected with this one."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetAllDoors",children:"Get All Doors"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Fill an array with all the door actors connected to the room."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetBoundsCenter",children:"Get Bounds Center"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns the world center position of the room."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetBoundsExtent",children:"Get Bounds Extent"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns the world size of the room."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetConnectedRoomAt",children:"Get Connected Room At"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns the connected room instance at DoorIndex."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetCustomData_BP",children:"Get Custom Data"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Access to custom data of the room."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetDoor",children:"Get Door"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Get the door actor from a specific index."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetRandomStream",children:"Get Random Stream"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns the RandomStream from the Dungeon Generator"})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/GetRoomData",children:"Get Room Data"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns the room data asset of this room instance."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/HasCustomData_BP",children:"Has Custom Data"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Check if the room instance contains a custom data of a specific type."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/IsDoorConnected",children:"Is Door Connected"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Returns true if the door at DoorIndex is connected to another room."})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/IsLocked",children:"Is Locked"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsxs)(o.td,{children:["Is the room locked?",(0,r.jsx)("br",{}),"If it is, the doors will be locked (except if they have ",(0,r.jsx)(o.code,{children:"Alway Unlocked"}),")."]})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/IsPlayerInside",children:"Is Player Inside"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsxs)(o.td,{children:["Is the player currently inside the room?",(0,r.jsx)("br",{}),"A player can be in multiple rooms at once, for example when he stands at the door frame,",(0,r.jsx)("br",{}),"the player's capsule is in both rooms."]})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/IsVisible",children:"Is Visible"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsx)(o.td,{children:"Is the room currently visible?"})]}),(0,r.jsxs)(o.tr,{children:[(0,r.jsx)(o.td,{children:(0,r.jsx)(o.a,{href:"/ProceduralDungeon/api/Room/Lock",children:"Lock"})}),(0,r.jsx)(o.td,{children:"Room"}),(0,r.jsxs)(o.td,{children:["Lock or unlock the room instance.",(0,r.jsx)("br",{}),"Will lock/unlock the doors too (except if they have ",(0,r.jsx)(o.code,{children:"Alway Unlocked"}),")."]})]})]})]})]})}function h(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>d,x:()=>i});var r=n(6540);const t={},s=r.createContext(t);function d(e){const o=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);