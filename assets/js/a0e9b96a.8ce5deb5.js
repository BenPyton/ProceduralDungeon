"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[92930],{48158:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"api/Classes/DungeonGraph/DungeonGraph","title":"DungeonGraph","description":"Procedural Dungeon \u23f5","source":"@site/docs/api/Classes/DungeonGraph/DungeonGraph.md","sourceDirName":"api/Classes/DungeonGraph","slug":"/api/Classes/DungeonGraph/","permalink":"/ProceduralDungeon/api/Classes/DungeonGraph/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"pagination_prev":null,"pagination_next":null},"sidebar":"homeSidebar"}');var t=r(74848),d=r(28453);const s={pagination_prev:null,pagination_next:null},a="Dungeon Graph",i={},l=[{value:"Class Details",id:"class-details",level:2},{value:"Description",id:"description",level:2},{value:"Nodes",id:"nodes",level:2}];function h(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/",children:"Procedural Dungeon"})," \u23f5\nDungeon Graph"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"dungeon-graph",children:"Dungeon Graph"})}),"\n",(0,t.jsx)(n.h2,{id:"class-details",children:"Class Details"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Defined in:"})," ",(0,t.jsx)(n.code,{children:"Public/DungeonGraph.h"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Hierarchy:"})," ",(0,t.jsx)(n.em,{children:"Object \u2192 Replicable Object \u2192 Dungeon Graph"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Implements:"})," ",(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/Classes/DungeonSaveInterface/",children:"Dungeon Save Interface"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Exposed in blueprint as:"})," Variable\xa0Type"]}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsxs)(n.p,{children:["Holds the generated dungeon.",(0,t.jsx)("br",{}),"You can access the rooms using many functions."]}),"\n",(0,t.jsx)(n.h2,{id:"nodes",children:"Nodes"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Category"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/Count",children:"Count"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns the total number of room"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/CountRoomData",children:"Count Room Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns the number of a specific RoomData in the dungeon"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/CountRoomType",children:"Count Room Type"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns the number of a specific RoomData type in the dungeon"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/CountTotalRoomData",children:"Count Total Room Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns the total number of RoomData in the dungeon from the list provided"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/CountTotalRoomType",children:"Count Total Room Type"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns the total number of RoomData type in the dungeon from the list provided"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetAllRooms",children:"Get All Rooms"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns all rooms"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetAllRoomsFromData",children:"Get All Rooms from Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns all room instances of the provided room data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetAllRoomsFromDataList",children:"Get All Rooms from Data List"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns all room instances of any of the provided room data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetAllRoomsWithAllCustomData",children:"Get All Rooms with All Custom Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns all room instances having ALL the provided custom data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetAllRoomsWithAnyCustomData",children:"Get All Rooms with Any Custom Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns all room instances having at least one of the provided custom data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetAllRoomsWithCustomData",children:"Get All Rooms with Custom Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns all room instances having the provided custom data"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetDungeonBoundsCenter",children:"Get Dungeon Bounds Center"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the center of the bounding box of the dungeon.",(0,t.jsx)("br",{}),"See: GetDungeonBoundsExtents"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetDungeonBoundsExtent",children:"Get Dungeon Bounds Extent"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the extent (half size) of the bounding box of the dungeon.",(0,t.jsx)("br",{}),"See: GetDungeonBoundsCenter"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetFirstRoomFromData",children:"Get First Room from Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the first found room instance of the provided room data",(0,t.jsx)("br",{}),"(no defined order, so could be any room of the dungeon)"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetPathBetween",children:"Get Path Between"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the path between A and B.",(0,t.jsx)("br",{}),"Note: Could be pure, but since it can be heavy duty for large dungeons, keep it impure to avoid duplicate calls."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetRandomRoom",children:"Get Random Room"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns a random room from an array of room"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetRoomAt",children:"Get Room At"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the room instance at the provided room cell (expressed in Room Units, not Unreal Units!!!).",(0,t.jsx)("br",{}),"Returns null if no room located at the provided cell."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/GetRoomByIndex",children:"Get Room by Index"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the room instance with the provided index.",(0,t.jsx)("br",{}),"Returns null if no room exists with the provided index."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/HasAlreadyOneRoomDataFrom",children:"Has Already One Room Data From"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns true if at least one of the RoomData from the list provided is already in the dungeon"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/HasAlreadyOneRoomTypeFrom",children:"Has Already One Room Type From"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns true if at least one of the RoomData type from the list provided is already in the dungeon"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/HasAlreadyRoomData",children:"Has Already Room Data"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns true if a specific RoomData is already in the dungeon"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/HasAlreadyRoomType",children:"Has Already Room Type"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsx)(n.td,{children:"Returns true if a specific RoomData type is already in the dungeon"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/HasValidPath",children:"Has Valid Path"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns wether a path is valid between 2 rooms (no locked room blocking the way)",(0,t.jsx)("br",{}),"Note: Could be pure, but since it can be heavy duty for large dungeons, keep it impure to avoid duplicate calls."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/NumberOfRoomBetween",children:"Number Of Room Between"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the minimum number of connected rooms between A and B.",(0,t.jsx)("br",{}),"Note: Could be pure, but since it can be heavy duty for large dungeons, keep it impure to avoid duplicate calls."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/DungeonGraph/NumberOfRoomBetween_ReadOnly",children:"Number Of Room Between (using ReadOnlyRoom)"})}),(0,t.jsx)(n.td,{children:"Dungeon\xa0Graph"}),(0,t.jsxs)(n.td,{children:["Returns the minimum number of connected rooms between A and B.",(0,t.jsx)("br",{}),"Note: Could be pure, but since it can be heavy duty for large dungeons, keep it impure to avoid duplicate calls."]})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var o=r(96540);const t={},d=o.createContext(t);function s(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);