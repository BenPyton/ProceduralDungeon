"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[97915],{54330:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/Choose-Door","title":"Choose Door","description":"This function let you choose a door actor to spawn between 2 rooms.\\\\","source":"@site/versioned_docs/version-3.3/guides/Choose-Door.md","sourceDirName":"guides","slug":"/guides/Choose-Door","permalink":"/ProceduralDungeon/3.3/guides/Choose-Door","draft":false,"unlisted":false,"tags":[],"version":"3.3","frontMatter":{"pagination_prev":"guides/Is-Valid-Dungeon","pagination_next":"guides/Packaging"},"sidebar":"homeSidebar","previous":{"title":"Is Valid Dungeon","permalink":"/ProceduralDungeon/3.3/guides/Is-Valid-Dungeon"},"next":{"title":"Packaging","permalink":"/ProceduralDungeon/3.3/guides/Packaging"}}');var t=n(74848),s=n(28453);const i={pagination_prev:"guides/Is-Valid-Dungeon",pagination_next:"guides/Packaging"},a="Choose Door",c={},d=[];function u(e){const o={a:"a",br:"br",code:"code",h1:"h1",header:"header",img:"img",p:"p",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"choose-door",children:"Choose Door"})}),"\n",(0,t.jsxs)(o.p,{children:["This function let you choose a ",(0,t.jsx)(o.a,{href:"/ProceduralDungeon/3.3/guides/Door",children:"door actor"})," to spawn between 2 rooms.",(0,t.jsx)(o.br,{}),"\n","If you don't want a door between the rooms you just have to return ",(0,t.jsx)(o.code,{children:"none"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["You should use the ",(0,t.jsx)(o.code,{children:"Door Type"})," input to return a door of the correct type if you use multiple door types in your project.",(0,t.jsx)(o.br,{}),"\n","You can check the door type of a door actor class with the function ",(0,t.jsx)(o.code,{children:"Is Door Of Type"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["You can use the ",(0,t.jsx)(o.code,{children:"Flipped"})," output to control which room the door faces.",(0,t.jsx)(o.br,{}),"\n","If false (default) the door forward will face the ",(0,t.jsx)(o.code,{children:"Current Room"}),".",(0,t.jsx)(o.br,{}),"\n","If true, the door forward will face the ",(0,t.jsx)(o.code,{children:"Next Room"}),"."]}),"\n",(0,t.jsx)(o.p,{children:'One of the room class input can be null if there is no room connected to it.\r\nYou certainly want to set an always closed door, or a door actor that act as a "wall".'}),"\n",(0,t.jsx)(o.p,{children:"An example to spawn a simple door if both rooms are valid, or a wall if one of them is not valid (assuming there is only one door type):"}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{src:n(45076).A+"",width:"917",height:"473"})})]})}function l(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},45076:(e,o,n)=>{n.d(o,{A:()=>r});const r=n.p+"assets/images/ChooseDoor-7fc7c159a668a760be43c01f3166a200.jpg"},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>a});var r=n(96540);const t={},s=r.createContext(t);function i(e){const o=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);