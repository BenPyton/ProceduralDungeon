"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[9398],{77708:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api/Classes/ReadOnlyRoom/ReadOnlyRoom","title":"ReadOnlyRoom","description":"Procedural Dungeon \u23f5","source":"@site/docs/api/Classes/ReadOnlyRoom/ReadOnlyRoom.md","sourceDirName":"api/Classes/ReadOnlyRoom","slug":"/api/Classes/ReadOnlyRoom/","permalink":"/ProceduralDungeon/api/Classes/ReadOnlyRoom/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"pagination_prev":null,"pagination_next":null},"sidebar":"homeSidebar"}');var t=o(74848),s=o(28453);const d={pagination_prev:null,pagination_next:null},i="Read Only Room",l={},a=[{value:"Class Details",id:"class-details",level:2},{value:"Description",id:"description",level:2},{value:"Nodes",id:"nodes",level:2}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/",children:"Procedural Dungeon"})," \u23f5\nRead Only Room"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"read-only-room",children:"Read Only Room"})}),"\n",(0,t.jsx)(n.h2,{id:"class-details",children:"Class Details"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Defined in:"})," ",(0,t.jsx)(n.code,{children:"Public/ReadOnlyRoom.h"}),(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Hierarchy:"})," ",(0,t.jsx)(n.em,{children:"Object \u2192 Interface \u2192 Read Only Room"})]}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Allow access to only some members of Room instances during the generation process."}),"\n",(0,t.jsx)(n.h2,{id:"nodes",children:"Nodes"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Category"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/AreAllDoorsConnected",children:"Are All Doors Connected"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns true if all the doors of this room are connected to other rooms."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/CountConnectedDoors",children:"Count Connected Doors"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns true if all the doors of this room are connected to other rooms."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/GetBoundsCenter",children:"Get Bounds Center"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns the world center position of the room."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/GetBoundsExtent",children:"Get Bounds Extent"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns the world extents (half size) of the room."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/GetDirection",children:"Get Direction"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns the direction of the room."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/GetPosition",children:"Get Position"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns the position of the room (in Room Units)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/GetRoomData",children:"Get Room Data"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsx)(n.td,{children:"Returns the room data asset of this room instance."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/ProceduralDungeon/api/ReadOnlyRoom/GetRoomID",children:"Get Room ID"})}),(0,t.jsx)(n.td,{children:"Room"}),(0,t.jsxs)(n.td,{children:["Returns the unique ID (per-dungeon) of the room.",(0,t.jsx)("br",{}),"The first room has ID 0 and then it increases in the order of placed room."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var r=o(96540);const t={},s=r.createContext(t);function d(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);