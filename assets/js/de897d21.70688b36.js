"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[2005],{2013:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>h});var t=n(4848),r=n(8453);const i={pagination_prev:"guides/Choose-First-Room-Data",pagination_next:"guides/Continue-To-Add-Room"},s="Choose Next Room",a={id:"guides/Choose-Next-Room-Data",title:"Choose Next Room",description:"This function is the main part of the procedural generation: it's where you set your own logic to generate your dungeon.\\",source:"@site/docs/guides/Choose-Next-Room-Data.md",sourceDirName:"guides",slug:"/guides/Choose-Next-Room-Data",permalink:"/ProceduralDungeon/guides/Choose-Next-Room-Data",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{pagination_prev:"guides/Choose-First-Room-Data",pagination_next:"guides/Continue-To-Add-Room"},sidebar:"homeSidebar",previous:{title:"Choose First Room",permalink:"/ProceduralDungeon/guides/Choose-First-Room-Data"},next:{title:"Continue To Add Room",permalink:"/ProceduralDungeon/guides/Continue-To-Add-Room"}},d={},h=[{value:"Tips on how you can do it",id:"tips-on-how-you-can-do-it",level:3}];function c(e){const o={a:"a",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"choose-next-room",children:"Choose Next Room"}),"\n",(0,t.jsxs)(o.p,{children:["This function is the main part of the procedural generation: it's where you set your own logic to generate your dungeon.",(0,t.jsx)(o.br,{}),"\n","This function is run each time the generator tries to add a room to the dungeon."]}),"\n",(0,t.jsx)(o.p,{children:"As input parameters:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"Current Room"})," is the room from which the generator will try to add the next room.",(0,t.jsx)(o.br,{}),"\n","For example, the first time this function is called, the ",(0,t.jsx)(o.code,{children:"Current Room"})," is the ",(0,t.jsx)(o.code,{children:"RoomData"})," asset you have returned in the ",(0,t.jsx)(o.a,{href:"/ProceduralDungeon/guides/Choose-First-Room-Data",children:(0,t.jsx)(o.code,{children:"Choose First Room"})})," function."]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"Door Data"})," is the door on which the next room will be connected to.",(0,t.jsx)(o.br,{}),"\n","You have access to its location (expressed in room units, not in unreal units!), its orientation and its ",(0,t.jsx)(o.code,{children:"DoorType"}),"."]}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:"As output:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"Return Value"})," is the ",(0,t.jsx)(o.code,{children:"Room Data"})," asset you want to add as the next room. The value must be non-null and have at least one compatible door with ",(0,t.jsx)(o.code,{children:"Door Data"}),"."]}),"\n",(0,t.jsxs)(o.li,{children:[(0,t.jsx)(o.code,{children:"Door Index"})," is the index of the door (from the ",(0,t.jsx)(o.code,{children:"Room Data"})," asset your return) used to connect with the ",(0,t.jsx)(o.code,{children:"Current Room"}),".",(0,t.jsx)(o.br,{}),"\n","If the index is negative, it will choose a random compatible door.",(0,t.jsx)(o.br,{}),"\n","If you set a value, it will take the door at the same index in your ",(0,t.jsx)(o.code,{children:"Room Data"})," asset (",(0,t.jsx)(o.em,{children:"make sure the door is compatible!"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["Here an example of a simple dungeon made by ",(0,t.jsx)(o.code,{children:"NbRoom"})," randomly chosen standard rooms before setting an exit room:",(0,t.jsx)(o.br,{}),"\n",(0,t.jsx)(o.img,{src:n(60).A+"",width:"977",height:"375"})]}),"\n",(0,t.jsx)(o.h3,{id:"tips-on-how-you-can-do-it",children:"Tips on how you can do it"}),"\n",(0,t.jsx)(o.p,{children:"Since it is one of the most important function of the plugin, I will give you some general steps on how you can effectively create the code of this function."}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:["First, you have to define the goal of your dungeon. You should ask yourself: 'What the player have to do to clear the dungeon?'.",(0,t.jsx)(o.br,{}),"\n","In the ",(0,t.jsx)(o.a,{href:"https://github.com/BenPyton/DungeonExample",children:"example project"}),", I want the player to reach a specific room (called the end room) in order to clear the dungeon."]}),"\n"]}),"\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:["Secondly, you have to design how you want your dungeon to look like.",(0,t.jsx)(o.br,{}),"\n","Do you want secret rooms? a boss room? an increasing room difficulty between start and end? etc.\r\nIn the ",(0,t.jsx)(o.a,{href:"https://github.com/BenPyton/DungeonExample",children:"example project"}),", I want to have something simple simple.\r\nThe end room is locked and the player needs to get a key placed in a specific room (called the key room) to unlock the end room.\r\nThe dungeon will thus have only one key room and only one end room.",(0,t.jsx)(o.br,{}),"\n","Since the player is spawned at the start room in my example project, the dungeon needs to look like that in order for the player to complete the dungeon: ",(0,t.jsx)(o.code,{children:"Start Room"})," -> ",(0,t.jsx)(o.code,{children:"Key Room"})," -> ",(0,t.jsx)(o.code,{children:"End Room"}),".\r\nI can then add whatever optional rooms I want between them (corridors, dead ends, etc.)."]}),"\n"]}),"\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:["Thirdly, once you have designed your dungeon on paper, you have to convert it to code in the ",(0,t.jsx)(o.code,{children:"ChooseNextRoomData"})," function.\r\nThe first thing would be to determine which of your rules are more specific to the others.",(0,t.jsx)(o.br,{}),"\n","If I am taking the ",(0,t.jsx)(o.a,{href:"https://github.com/BenPyton/DungeonExample",children:"example"})," I have described above, I want ",(0,t.jsx)(o.em,{children:"one"})," end room and ",(0,t.jsx)(o.em,{children:"one"}),' key room.\r\nThese 2 rules are more specific than the "adding whatever corridors, dead ends, etc. between those rooms".',(0,t.jsx)(o.br,{}),"\n","Since I need a key room before the end room, I first check that I have a key room.\r\nIf not, I check if I have the conditions fulfilled to add one, and return the key room if it is.",(0,t.jsx)(o.br,{}),"\n","If a have a key room, I do the same kind of checks with the end room (",(0,t.jsx)(o.em,{children:"do I have one? are the conditions fulfilled to add one?"}),").",(0,t.jsx)(o.br,{}),"\n",'If the conditions are not fulfilled for either of rooms, then I do my generic rule: adding a random room from a list of simple "corridor" rooms.']}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["The rules I explained as an example in these steps are extremely simple.",(0,t.jsx)(o.br,{}),"\n","Remember that you can do whatever you want!",(0,t.jsx)(o.br,{}),"\n","You don't need an end room if you want another goal for your dungeon (e.g. killing all the mobs).",(0,t.jsx)(o.br,{}),"\n","You don't need the player to spawn in the start room (or even have a specific room as a first room).\r\nYou could for example have multiple rooms with a player start actor you choose from to spawn the player.",(0,t.jsx)(o.br,{}),"\n","You can add any variables you want in your room data to add constraints on your generation rules (e.g. add a room difficulty value so you can choose a hard room after an easy room)."]})]})}function l(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},60:(e,o,n)=>{n.d(o,{A:()=>t});const t=n.p+"assets/images/ChooseNextRoomData-921067142ca6c4718fe7a28c88387394.jpg"},8453:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>a});var t=n(6540);const r={},i=t.createContext(r);function s(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);