"use strict";(self.webpackChunkprocedural_dungeon_wiki=self.webpackChunkprocedural_dungeon_wiki||[]).push([[8033],{6303:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=t(4848),n=t(8453);const r={pagination_prev:null,pagination_next:null},s="Room Visitor",a={id:"guides/Room-Visitor",title:"Room Visitor",description:"The Room Visitor interface is useful to add behaviors to your actors or components when they enters or exit a room.",source:"@site/docs/guides/Room-Visitor.md",sourceDirName:"guides",slug:"/guides/Room-Visitor",permalink:"/ProceduralDungeon/guides/Room-Visitor",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{pagination_prev:null,pagination_next:null},sidebar:"homeSidebar"},c={},d=[];function u(e){const o={a:"a",code:"code",h1:"h1",img:"img",p:"p",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.h1,{id:"room-visitor",children:"Room Visitor"}),"\n",(0,i.jsxs)(o.p,{children:["The ",(0,i.jsx)(o.code,{children:"Room Visitor"})," interface is useful to add behaviors to your actors or components when they enters or exit a room."]}),"\n",(0,i.jsxs)(o.p,{children:["You can use this interface to keep track of the rooms the actor is in to be able to call functions on them, change some ",(0,i.jsx)(o.a,{href:"/ProceduralDungeon/guides/Room-Custom-Data",children:"Room Custom Data"})," variables, display various details on player's HUD, etc."]}),"\n",(0,i.jsxs)(o.p,{children:["For example, the ",(0,i.jsx)(o.a,{href:"/ProceduralDungeon/guides/Occlusion-Culling",children:"Room Visibility Component"})," (used to show/hide an actor with the rooms it is in) is implementing the ",(0,i.jsx)(o.code,{children:"Room Visitor"})," interface to bind/unbind to the room's visibility event dispatcher when the actor enters or exits any room, and thus can change its visibility according to the room visibility state."]}),"\n",(0,i.jsx)(o.h1,{id:"how-to-use-it",children:"How to use it"}),"\n",(0,i.jsx)(o.p,{children:"Just add the interface like any other interface in Blueprint or C++, and implement its functions."}),"\n",(0,i.jsxs)(o.p,{children:["For example, this is a simple implementation in Blueprint to keep a reference of the rooms an actor is in (stored in an array called ",(0,i.jsx)(o.code,{children:"Cached Room Array"}),")."]}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.img,{src:t(3532).A+"",width:"1560",height:"320"})})]})}function l(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},3532:(e,o,t)=>{t.d(o,{A:()=>i});const i=t.p+"assets/images/RoomVisitor-3ba55a29440bdb14785cd12cbc399ba0.png"},8453:(e,o,t)=>{t.d(o,{R:()=>s,x:()=>a});var i=t(6540);const n={},r=i.createContext(n);function s(e){const o=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(r.Provider,{value:o},e.children)}}}]);